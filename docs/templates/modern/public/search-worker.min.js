"use strict";

import Fuse from "https://cdn.jsdelivr.net/npm/fuse.js@latest/+esm";

let fuseIndex;
let searchData;

// See: https://www.fusejs.io/api/options.html
const fuseOptions = {
  threshold: 0.6,
  ignoreLocation: true,
  useExtendedSearch: true,

  minMatchCharLength: 2,
  findAllMatches: true,

  shouldSort: true,
  tokenize: true,
  matchAllTokens: false,

  keys: [
    { name: "href",     weight: 0.5 },
    { name: "title",    weight: 0.8 },
    { name: "keywords", weight: 0.7 },
    { name: "summary", weight: 0.1 }
  ]
};

onmessage = oEvent => {
  const q = oEvent.data.q;
  let results = [];
  if (fuseIndex) {
    const hits = fuseIndex.search(q);
    results = hits.map((hit) => {
      const item = hit.item;
      return {
        href: item.href,
        title: item.title,
        keywords: item.keywords,
        summary: item.summary
      };
    });
  }
  postMessage({ e: "query-ready", q, d: results });
}

async function buildIndex() {
  // Try to load pre-generated search index
  const response = await fetch("../index.fuse.json");
  if(response.ok)
  {
    const json = await response.json();
    const index = Fuse.parseIndex(json);
    fuseIndex = new Fuse(null, fuseOptions, index);
  }
  else
  {
    const response = await fetch("../index.json");
    if(!response.ok) return;

    var json = await response.json();
    searchData = Object.values(json); // Convert to items.
    if (searchData && searchData.length > 0) {     
        fuseIndex = new Fuse(searchData, fuseOptions);
    }
  }
  postMessage({ e: "index-ready" });
}

await buildIndex();
